{"version":3,"sources":["hooks/useLocalStorage.ts","utils/GitLabUtils.ts","components/UserList.tsx","components/CommentList.tsx","components/ProjectList.tsx","hooks/useDebounce.ts","utils/ChartUtils.ts","components/gitlab.svg","components/Login.tsx","components/ChartContainer.tsx","App.tsx","utils/ExcelUtils.ts","reportWebVitals.ts","index.tsx"],"names":["useLocalStorage","key","initialValue","useState","item","window","localStorage","getItem","JSON","parse","error","console","log","storedValue","setStoredValue","value","valueToStore","Function","setItem","stringify","client","searchText","a","Projects","search","projects","getDiscussons","projectId","createdAfter","createdBefore","MergeRequests","all","perPage","allMrs","mrs","filter","user_notes_count","promises","map","mrItem","MergeRequestDiscussions","iid","then","items","discussion","notes","some","system","mergeRequest","Promise","allSettled","allComments","comments","flatMap","status","getUserComments","MergeRequestNotes","comment","getNoteUrl","web_url","id","UserList","user","label","onUserSelected","credentials","useMemo","Gitlab","users","setUsers","useEffect","Users","Autocomplete","options","getOptionLabel","option","name","onChange","_","newValue","renderOption","props","ListItem","alignItems","disabled","state","ListItemButton","selected","ListItemAvatar","Avatar","alt","src","avatar_url","ListItemText","primary","secondary","username","renderInput","params","TextField","variant","CommentList","List","author","href","target","rel","title","body","ProjectList","project","onProjectSelected","React","open","setOpen","setOptions","loading","setLoading","setValue","debouncedValue","delay","setDebouncedValue","handler","setTimeout","clearTimeout","useDebounce","searchProjects","finally","name_with_namespace","onOpen","onClose","onInputChange","newInputValue","filterOptions","x","description","InputProps","endAdornment","Fragment","CircularProgress","color","size","getDataForUser","rawData","userType","userName","groupByUserType","commentsRecieved","tidy","data","commentsPerUser","groupBy","summarize","total","n","barDatum","sum","forEach","convertToItemsLeft","reviewers","distinct","reviewer","authors","barData","indexBy","keys","arrange","asc","convertToItemsReceived","getAuthorReviewerFromComments","_extends","Object","assign","i","arguments","length","source","prototype","hasOwnProperty","call","apply","this","_objectWithoutProperties","excluded","sourceKeys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","d","fill","_ref3","_ref4","_ref5","_ref6","_ref7","_ref8","SvgGitlab","_ref","svgRef","titleId","viewBox","xmlns","preserveAspectRatio","ref","ForwardRef","Login","onLoggedIn","token","setToken","host","setHost","handleLoggedIn","useCallback","current","catch","ex","Box","style","width","height","display","justifyContent","Stack","spacing","alignSelf","Typography","component","required","placeholder","e","type","Button","onClick","ChartContainer","children","Paper","square","barChartSettings","margin","left","padding","labelTextColor","labelSkipWidth","labelSkipHeight","layout","App","setCredentials","selectedUser","selectUser","setProject","setComments","discussions","setDiscussions","Date","setCreatedBefore","setMonth","getMonth","setCreatedAfter","setUser","filteredComments","setFilteredComments","showComments","toISOString","showDiscussions","discussionsLeft","convertToDiscussionsLeft","discussionsReceived","convertToDiscussionsReceived","commentsLeft","convertToCommentsLeft","convertToCommentsReceived","commentsRecievedFromUsers","userId","convertToCommentsRecivedFromUsers","commentsLeftToUsers","convertToCommentsLeftToUsers","updateComments","reviewerName","authorName","getFilteredComments","anchorElUser","setAnchorElUser","handleCloseUserMenu","className","AppBar","position","Container","maxWidth","Toolbar","disableGutters","noWrap","sx","mr","flexGrow","Tooltip","IconButton","event","currentTarget","p","Menu","mt","anchorEl","anchorOrigin","vertical","horizontal","keepMounted","transformOrigin","Boolean","MenuItem","textAlign","substring","newDate","InputLabelProps","shrink","fullWidth","exportEntries","config","filename","sheet","zipcelx","downloadComments","flexDirection","indexValue","reportWebVitals","onPerfEntry","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4fd03044.chunk.js","sourcesContent":["import { useState } from \"react\";\r\n\r\nexport function useLocalStorage<T>(key: string, initialValue: T) {\r\n    // State to store our value\r\n    // Pass initial state function to useState so logic is only executed once\r\n    const [storedValue, setStoredValue] = useState(() => {\r\n      try {\r\n        // Get from local storage by key\r\n        const item = window.localStorage.getItem(key);\r\n        // Parse stored json or if none return initialValue\r\n        return item ? JSON.parse(item) : initialValue;\r\n      } catch (error) {\r\n        // If error also return initialValue\r\n        console.log(error);\r\n        return initialValue;\r\n      }\r\n    });\r\n    // Return a wrapped version of useState's setter function that ...\r\n    // ... persists the new value to localStorage.\r\n    const setValue = (value: T) => {\r\n      try {\r\n        // Allow value to be a function so we have same API as useState\r\n        const valueToStore =\r\n          value instanceof Function ? value(storedValue) : value;\r\n        // Save state\r\n        setStoredValue(valueToStore);\r\n        // Save to local storage\r\n        window.localStorage.setItem(key, JSON.stringify(valueToStore));\r\n      } catch (error) {\r\n        // A more advanced implementation would handle the error case\r\n        console.log(error);\r\n      }\r\n    };\r\n    return [storedValue, setValue];\r\n  }","import { Gitlab } from '@gitbeaker/core/dist/types';\r\nimport { MergeRequestNoteSchema, MergeRequestSchema, DiscussionSchema } from '@gitbeaker/core/dist/types/types';\r\n\r\nexport interface UserComment {\r\n    mergeRequest: MergeRequestSchema;\r\n    comment: MergeRequestNoteSchema;\r\n}\r\n\r\nexport interface UserDiscussion {\r\n    mergeRequest: MergeRequestSchema;\r\n    discussion: DiscussionSchema;\r\n}\r\n\r\nexport interface UserCommentsOptions {\r\n    projectId: number;\r\n    createdAfter?: string;\r\n    createdBefore?: string;\r\n}\r\n\r\nexport async function searchProjects(client: Gitlab, searchText: string) {\r\n    const projects = await client.Projects.search(searchText);\r\n    return projects;\r\n}\r\n\r\nexport async function getDiscussons(client: Gitlab, { projectId, createdAfter, createdBefore }: UserCommentsOptions) {\r\n    const allMrs = await client.MergeRequests.all({\r\n        projectId,\r\n        createdAfter,\r\n        createdBefore,\r\n        perPage: 100\r\n    });\r\n\r\n    const mrs = allMrs.filter(item => item.user_notes_count !== 0);\r\n    const promises = mrs.map((mrItem) => {\r\n        return client.MergeRequestDiscussions.all(projectId, mrItem.iid, { perPage: 100 }).then((items) => {\r\n            const filtered = items.filter(discussion => discussion.notes?.some(item => !item.system));\r\n            return filtered.map((item => ({ mergeRequest: mrItem, discussion: item }) as UserDiscussion));\r\n        })\r\n    });\r\n\r\n    const allComments = await Promise.allSettled(promises);\r\n\r\n    const comments = allComments\r\n        .flatMap(item => item.status === 'fulfilled' ? item.value : []);\r\n\r\n    return comments;\r\n}\r\n\r\nexport async function getUserComments(client: Gitlab, { projectId, createdAfter, createdBefore }: UserCommentsOptions): Promise<UserComment[]> {\r\n    const allMrs = await client.MergeRequests.all({\r\n        projectId,\r\n        createdAfter,\r\n        createdBefore,\r\n        perPage: 100\r\n    });\r\n\r\n    const mrs = allMrs.filter(item => item.user_notes_count !== 0);\r\n    const promises = mrs.map((mrItem) => {\r\n        return client.MergeRequestNotes.all(projectId, mrItem.iid, { perPage: 100 }).then((items) => {\r\n            const userNotes = items.filter(item => !item.system);\r\n\r\n            return userNotes.map((item => ({ mergeRequest: mrItem, comment: item }) as UserComment))\r\n        })\r\n    })\r\n\r\n    const allComments = await Promise.allSettled(promises);\r\n\r\n    const comments = allComments\r\n        .flatMap(item => item.status === 'fulfilled' ? item.value : []);\r\n\r\n    return comments;\r\n}\r\n\r\nexport function getFilteredComments(comments: UserComment[], reviewerName: string | null, authorName: string | null) {\r\n    let filteredComments = comments;\r\n\r\n    if (!!reviewerName) {\r\n        filteredComments = filteredComments.filter(item => item.comment.author.username === reviewerName);\r\n    }\r\n\r\n    if (!!authorName) {\r\n        filteredComments = filteredComments.filter(item => item.mergeRequest.author.username === authorName)\r\n    }\r\n\r\n    return filteredComments;\r\n}\r\n\r\nexport function getNoteUrl({ mergeRequest, comment }: UserComment) {\r\n    return `${mergeRequest.web_url}/#note_${comment.id}`;\r\n}\r\n","import { useMemo, useEffect, useState } from 'react';\r\nimport { UserSchema } from '@gitbeaker/core/dist/types/types';\r\nimport { Autocomplete, Avatar, ListItem, ListItemAvatar, ListItemButton, ListItemText, TextField } from '@mui/material';\r\nimport { Credentials } from '../App';\r\nimport { Gitlab } from '@gitbeaker/browser';\r\nimport { useLocalStorage } from '../hooks/useLocalStorage';\r\n\r\nexport interface UserListProps {\r\n    label: string;\r\n    user: UserSchema | null;\r\n    onUserSelected: (user: UserSchema | null) => void;\r\n}\r\n\r\nexport function UserList({ user, label, onUserSelected }: UserListProps) {\r\n    const [credentials] = useLocalStorage<Credentials | null>(\"credentials\", null);\r\n    const client = useMemo(() => new Gitlab(credentials), [credentials]);\r\n    const [users, setUsers] = useState<UserSchema[]>([]);\r\n\r\n    useEffect(() => {\r\n        client.Users.all({ perPage: 100 }).then((users) => {\r\n            setUsers(users);\r\n        });\r\n    }, [client]);\r\n\r\n    return (\r\n        <Autocomplete\r\n            value={user}\r\n            options={users}\r\n            getOptionLabel={(option) => option.name}\r\n            onChange={(_, newValue) => onUserSelected(newValue)}\r\n            renderOption={(props, item) => (\r\n                <ListItem\r\n                    key={item.id}\r\n                    alignItems=\"flex-start\"\r\n                    disabled={item.state === \"blocked\"}\r\n                    {...props}>\r\n                    <ListItemButton selected={user?.id === item.id}>\r\n                        <ListItemAvatar>\r\n                            <Avatar alt={item.name} src={item.avatar_url} />\r\n                        </ListItemAvatar>\r\n                        <ListItemText\r\n                            primary={item.name}\r\n                            secondary={item.username}\r\n                        />\r\n                    </ListItemButton>\r\n                </ListItem>\r\n            )}\r\n            renderInput={(params) => (\r\n                <TextField {...params} label={label} variant=\"outlined\" />\r\n            )}\r\n        />\r\n    );\r\n}\r\n\r\nexport default UserList;","import { UserComment, getNoteUrl } from './../utils/GitLabUtils';\r\nimport { Avatar, List, ListItem, ListItemAvatar, ListItemText } from '@mui/material';\r\n\r\nexport interface CommentListProps {\r\n    comments: UserComment[]\r\n}\r\n\r\nexport function CommentList({ comments }: CommentListProps) {\r\n    return (\r\n        <List>\r\n            {comments.map((item) =>\r\n                <ListItem key={item.comment.id}>\r\n                    <ListItemAvatar>\r\n                        <Avatar src={item.comment.author.avatar_url} />\r\n                    </ListItemAvatar>\r\n                    <ListItemText\r\n                        primary={<a href={getNoteUrl(item)} target=\"_blank\" rel=\"noreferrer\">{item.mergeRequest.title}</a>}\r\n                        secondary={item.comment.body}\r\n                    />\r\n                </ListItem>)\r\n            }\r\n        </List>\r\n    )\r\n}","import React, { useState, useEffect, useMemo } from 'react';\r\nimport CircularProgress from '@mui/material/CircularProgress';\r\nimport { searchProjects } from '../utils/GitLabUtils';\r\nimport { useLocalStorage } from '../hooks/useLocalStorage';\r\nimport { Gitlab } from '@gitbeaker/browser';\r\nimport { useDebounce } from '../hooks/useDebounce';\r\nimport { Credentials } from '../App';\r\nimport { ProjectSchema } from '@gitbeaker/core/dist/types/types';\r\nimport { Autocomplete, Avatar, ListItem, ListItemAvatar, ListItemButton, ListItemText, TextField } from '@mui/material';\r\n\r\nexport interface ProjectListProps {\r\n    project: ProjectSchema;\r\n    onProjectSelected: (project: ProjectSchema | null) => void;\r\n}\r\n\r\nexport function ProjectList({ project, onProjectSelected }: ProjectListProps) {\r\n    const [credentials] = useLocalStorage<Credentials | null>(\"credentials\", null);\r\n    const client = useMemo(() => new Gitlab(credentials), [credentials]);\r\n    const [open, setOpen] = React.useState(false);\r\n    const [options, setOptions] = React.useState<ProjectSchema[]>([]);\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    const [value, setValue] = useState<string>(\"\");\r\n    const debouncedValue = useDebounce(value, 300);\r\n\r\n    useEffect(() => {\r\n        if (client && open && debouncedValue) {\r\n            setLoading(true);\r\n            searchProjects(client, debouncedValue)\r\n                .then(setOptions)\r\n                .finally(() => setLoading(false));\r\n        }\r\n    }, [client, debouncedValue, open]);\r\n\r\n    return (\r\n        <Autocomplete\r\n            getOptionLabel={(option) => option.name_with_namespace}\r\n            open={open}\r\n            onOpen={() => setOpen(true)}\r\n            onClose={() => setOpen(false)}\r\n            options={options}\r\n            loading={loading}\r\n            value={project}\r\n            onChange={(_, newValue) => onProjectSelected(newValue)}\r\n            onInputChange={(_, newInputValue) => setValue(newInputValue)}\r\n            // reset client side filtering\r\n            filterOptions={(x) => x}\r\n            renderOption={(props, item) => (\r\n                <ListItem\r\n                    key={item.id}\r\n                    alignItems=\"flex-start\"\r\n                    {...props}>\r\n                    <ListItemButton\r\n                        selected={project?.id === item.id}\r\n                    >\r\n                        <ListItemAvatar>\r\n                            <Avatar alt={item.name} src={item.avatar_url} />\r\n                        </ListItemAvatar>\r\n                        <ListItemText\r\n                            primary={item.name_with_namespace}\r\n                            secondary={item.description}\r\n                        />\r\n                    </ListItemButton>\r\n                </ListItem>\r\n            )}\r\n            renderInput={(params) => (\r\n                <TextField\r\n                    {...params}\r\n                    label=\"Projects\"\r\n                    InputProps={{\r\n                        ...params.InputProps,\r\n                        endAdornment: (\r\n                            <React.Fragment>\r\n                                {loading ? <CircularProgress color=\"inherit\" size={20} /> : null}\r\n                                {params.InputProps.endAdornment}\r\n                            </React.Fragment>\r\n                        ),\r\n                    }}\r\n                />\r\n            )}\r\n        />\r\n    );\r\n}","import { useEffect, useState } from \"react\";\r\n\r\n/**\r\n * https://usehooks.com/useDebounce/\r\n * @param value values which will be changed in @param delay milliseconds\r\n * @param delay delay to change provided value\r\n * @returns debounced value\r\n */\r\nexport function useDebounce<T>(value: T, delay: number): T {\r\n    // State and setters for debounced value\r\n    const [debouncedValue, setDebouncedValue] = useState<T>(value);\r\n    useEffect(\r\n        () => {\r\n            // Update debounced value after delay\r\n            const handler = setTimeout(() => {\r\n                setDebouncedValue(value);\r\n            }, delay);\r\n            // Cancel the timeout if value changes (also on delay change or unmount)\r\n            // This is how we prevent debounced value from updating if value is changed ...\r\n            // .. within the delay period. Timeout gets cleared and restarted.\r\n            return () => {\r\n                clearTimeout(handler);\r\n            };\r\n        },\r\n        [value, delay] // Only re-call effect if value or delay changes\r\n    );\r\n    return debouncedValue;\r\n}","import { BarDatum } from \"@nivo/bar\";\r\nimport { UserComment, UserDiscussion } from \"./GitLabUtils\";\r\nimport { arrange, asc, distinct, groupBy, sum, summarize, tidy, filter, n } from '@tidyjs/tidy'\r\n\r\ninterface ReviewBarDatum extends BarDatum {\r\n    userName: string;\r\n    total: number;\r\n}\r\n\r\ninterface AuthorReviewer {\r\n    reviewer: string;\r\n    author: string;\r\n}\r\n\r\ninterface ReviewBarChartSettings<T = BarDatum> {\r\n    indexBy: string;\r\n    keys: string[];\r\n    data: T[];\r\n}\r\n\r\nexport function convertToDiscussionsLeft(discussions: UserDiscussion[]): ReviewBarChartSettings<ReviewBarDatum> {\r\n    const rawData = discussions.map(item => ({\r\n        author: item.mergeRequest.author.username as string,\r\n        reviewer: (item.discussion?.notes?.[0]?.author.username as string) ?? '[empty]',\r\n    } as AuthorReviewer)).filter((item) => item.reviewer !== item.author);\r\n\r\n    return convertToItemsLeft(rawData);\r\n}\r\n\r\nexport function convertToDiscussionsReceived(discussions: UserDiscussion[]): ReviewBarChartSettings<ReviewBarDatum> {\r\n    const rawData = discussions.map(item => ({\r\n        author: item.mergeRequest.author.username as string,\r\n        reviewer: (item.discussion?.notes?.[0]?.author.username as string) ?? '[empty]',\r\n    } as AuthorReviewer)).filter((item) => item.reviewer !== item.author);\r\n\r\n    return convertToItemsReceived(rawData);\r\n}\r\n\r\nexport function convertToCommentsLeft(comments: UserComment[]): ReviewBarChartSettings<ReviewBarDatum> {\r\n    const rawData = getAuthorReviewerFromComments(comments).filter((item) => item.reviewer !== item.author);\r\n    return convertToItemsLeft(rawData);\r\n}\r\n\r\nexport function convertToCommentsReceived(comments: UserComment[]): ReviewBarChartSettings<ReviewBarDatum> {\r\n    const rawData = getAuthorReviewerFromComments(comments).filter((item) => item.reviewer !== item.author);\r\n    return convertToItemsReceived(rawData);\r\n}\r\n\r\nexport function convertToCommentsRecivedFromUsers(comments: UserComment[], userId: number): ReviewBarChartSettings {\r\n    const rawData = getAuthorReviewerFromComments(comments.filter(item => item.mergeRequest.author.id === userId))\r\n        .filter((item) => item.reviewer !== item.author);\r\n\r\n    const data = tidy(\r\n        rawData,\r\n        groupBy('reviewer', [\r\n            summarize({ total: n() }),\r\n        ]),\r\n        arrange([asc('total')])\r\n    );\r\n\r\n    return {\r\n        indexBy: 'reviewer',\r\n        keys: ['total'],\r\n        data\r\n    };\r\n}\r\n\r\nexport function convertToCommentsLeftToUsers(comment: UserComment[], userId: number): ReviewBarChartSettings {\r\n    const rawData = getAuthorReviewerFromComments(comment.filter(item => item.comment.author.id === userId))\r\n        .filter((item) => item.author !== item.reviewer);\r\n\r\n    const data = tidy(\r\n        rawData,\r\n        groupBy('author', [\r\n            summarize({ total: n() })\r\n        ]),\r\n        arrange([asc('total')])\r\n    );\r\n\r\n    return {\r\n        indexBy: 'author',\r\n        keys: ['total'],\r\n        data,\r\n    };\r\n}\r\n\r\nfunction getDataForUser(rawData: AuthorReviewer[], userType: 'author' | 'reviewer', userName: string): ReviewBarDatum {\r\n    const groupByUserType = userType === 'author' ? 'reviewer' : 'author'\r\n\r\n    const commentsRecieved = tidy(\r\n        rawData,\r\n        filter((data) => data[userType] === userName),\r\n    );\r\n\r\n    const commentsPerUser = tidy(commentsRecieved,\r\n        groupBy([groupByUserType], [\r\n            summarize({ total: n() })\r\n        ]),\r\n        filter(data => data.total !== 0)\r\n    );\r\n\r\n    const barDatum: ReviewBarDatum = {\r\n        userName,\r\n        total: tidy(commentsPerUser, summarize({\r\n            total: sum('total')\r\n        }))[0].total,\r\n    };\r\n    commentsPerUser.forEach(comment => {\r\n        barDatum[comment[groupByUserType]] = comment.total;\r\n    });\r\n\r\n    return barDatum;\r\n}\r\n\r\nfunction convertToItemsLeft(items: AuthorReviewer[]): ReviewBarChartSettings<ReviewBarDatum> {\r\n    const reviewers = tidy(items, distinct(['reviewer'])).map(item => item.reviewer);\r\n    const authors = tidy(items, distinct(['author'])).map(item => item.author);\r\n\r\n    let barData = reviewers\r\n        .map(userName => {\r\n            return getDataForUser(items, 'reviewer', userName)\r\n        });\r\n\r\n    barData = tidy(barData, arrange([asc('total')]));\r\n\r\n    return {\r\n        indexBy: 'userName',\r\n        keys: authors,\r\n        data: barData,\r\n    };\r\n}\r\n\r\nfunction convertToItemsReceived(items: AuthorReviewer[]): ReviewBarChartSettings<ReviewBarDatum> {\r\n    const reviewers = tidy(items, distinct(['reviewer'])).map(item => item.reviewer);\r\n    const authors = tidy(items, distinct(['author'])).map(item => item.author);\r\n\r\n    let barData = authors\r\n        .map(userName => {\r\n            return getDataForUser(items, 'author', userName)\r\n        });\r\n\r\n    barData = tidy(barData, arrange([asc('total')]));\r\n\r\n    return {\r\n        indexBy: 'userName',\r\n        keys: reviewers,\r\n        data: barData,\r\n    };\r\n}\r\n\r\nfunction getAuthorReviewerFromComments(comments: UserComment[]) {\r\n    return comments.map<AuthorReviewer>(item => ({\r\n        reviewer: item.comment.author.username,\r\n        author: item.mergeRequest.author.username as string,\r\n    }))\r\n}","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nvar _ref2 = /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M128.075 236.075l47.104-144.97H80.97l47.104 144.97z\",\n  fill: \"#E24329\"\n});\n\nvar _ref3 = /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M128.075 236.074L80.97 91.104H14.956l113.119 144.97z\",\n  fill: \"#FC6D26\"\n});\n\nvar _ref4 = /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M14.956 91.104L.642 135.16a9.752 9.752 0 0 0 3.542 10.903l123.891 90.012-113.12-144.97z\",\n  fill: \"#FCA326\"\n});\n\nvar _ref5 = /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M14.956 91.105H80.97L52.601 3.79c-1.46-4.493-7.816-4.492-9.275 0l-28.37 87.315z\",\n  fill: \"#E24329\"\n});\n\nvar _ref6 = /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M128.075 236.074l47.104-144.97h66.015l-113.12 144.97z\",\n  fill: \"#FC6D26\"\n});\n\nvar _ref7 = /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M241.194 91.104l14.314 44.056a9.752 9.752 0 0 1-3.543 10.903l-123.89 90.012 113.119-144.97z\",\n  fill: \"#FCA326\"\n});\n\nvar _ref8 = /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M241.194 91.105h-66.015l28.37-87.315c1.46-4.493 7.816-4.492 9.275 0l28.37 87.315z\",\n  fill: \"#E24329\"\n});\n\nfunction SvgGitlab(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, [\"title\", \"titleId\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    viewBox: \"0 0 256 236\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    preserveAspectRatio: \"xMinYMin meet\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8);\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgGitlab);\nexport default __webpack_public_path__ + \"static/media/gitlab.03baf535.svg\";\nexport { ForwardRef as ReactComponent };","import { Button, Stack, TextField, Typography } from \"@mui/material\";\r\nimport { Box } from \"@mui/system\";\r\nimport { useCallback, useState } from \"react\";\r\nimport { ReactComponent as GitLabIcon } from './gitlab.svg';\r\nimport { Gitlab } from '@gitbeaker/browser';\r\nimport { UserSchema } from '@gitbeaker/core/dist/types/types';\r\n\r\nexport interface LoginProps {\r\n    onLoggedIn: (token: string, host: string, user: UserSchema) => void;\r\n}\r\n\r\nexport function Login({ onLoggedIn }: LoginProps) {\r\n    const [token, setToken] = useState(\"\");\r\n    const [host, setHost] = useState(\"\");\r\n\r\n    //TODO: need to call client.Users.current() to make sure token and host are correct\r\n\r\n    const handleLoggedIn = useCallback(() => {\r\n        //TODO: replace when start using react-router\r\n        const client = new Gitlab({\r\n            token,\r\n            host\r\n        });\r\n\r\n        client.Users.current().then(user => {\r\n            onLoggedIn(token, host, user);\r\n        }).catch(ex => {\r\n            console.log(ex);\r\n        });\r\n    }, [host, onLoggedIn, token]);\r\n\r\n    return (\r\n        <Box style={{ width: \"100%\", height: \"100%\", display: 'flex', justifyContent: 'center', alignItems: 'center' }}>\r\n            <Stack style={{ width: 500 }} spacing={2}>\r\n                <GitLabIcon style={{ width: 150, alignSelf: \"center\" }} />\r\n                <Typography variant=\"h5\" component=\"h1\" alignSelf={'center'}>\r\n                    GitLab Code Review Analyzer\r\n                </Typography>\r\n                <TextField\r\n                    required\r\n                    label=\"Host\"\r\n                    name=\"host\"\r\n                    placeholder=\"https://gitlab.com\"\r\n                    value={host}\r\n                    onChange={(e) => setHost(e.target.value)}\r\n                />\r\n                <TextField\r\n                    required\r\n                    label=\"Token\"\r\n                    name=\"token\"\r\n                    value={token}\r\n                    type=\"password\"\r\n                    onChange={(e) => setToken(e.target.value)}\r\n                />\r\n                <Button onClick={handleLoggedIn}>Sing In</Button>\r\n            </Stack>\r\n        </Box>\r\n    )\r\n}","import { Paper } from \"@mui/material\";\r\n\r\nexport interface ChartContainerProps {\r\n    title: string;\r\n    children: React.ReactChild;\r\n}\r\n\r\nexport function ChartContainer({ children, title }: ChartContainerProps) {\r\n    return <Paper variant=\"outlined\" square component=\"section\">\r\n        <h3>{title}</h3>\r\n        {children}\r\n    </Paper>\r\n} ","import React, { useCallback, useEffect, useMemo, useState } from 'react';\r\nimport './App.css';\r\nimport { Gitlab } from '@gitbeaker/browser';\r\nimport { useLocalStorage } from './hooks/useLocalStorage';\r\nimport { getFilteredComments, getUserComments, getDiscussons, UserComment, UserDiscussion } from './utils/GitLabUtils';\r\nimport { UserSchema } from '@gitbeaker/core/dist/types/types';\r\nimport { UserList } from \"./components/UserList\";\r\nimport { CommentList } from './components/CommentList';\r\nimport { ProjectList } from './components/ProjectList';\r\nimport { Bar, BarSvgProps, BarDatum } from '@nivo/bar';\r\nimport {\r\n  convertToCommentsLeft,\r\n  convertToCommentsLeftToUsers,\r\n  convertToCommentsReceived,\r\n  convertToCommentsRecivedFromUsers,\r\n  convertToDiscussionsLeft,\r\n  convertToDiscussionsReceived\r\n} from './utils/ChartUtils';\r\nimport { Login } from './components/Login';\r\nimport { AppBar, Box, Container, IconButton, Toolbar, Typography, MenuItem, Tooltip, Avatar, Menu, Button, TextField, Stack } from '@mui/material';\r\nimport { downloadComments } from './utils/ExcelUtils';\r\nimport { ProjectSchema } from '@gitbeaker/core/dist/types/types';\r\nimport { ChartContainer } from './components/ChartContainer';\r\n\r\nexport interface Credentials {\r\n  token: string;\r\n  host: string;\r\n}\r\n\r\nconst barChartSettings = {\r\n  width: 500,\r\n  height: 400,\r\n  margin: { left: 150 },\r\n  padding: 0.2,\r\n  labelTextColor: 'inherit:darker(1.4)',\r\n  labelSkipWidth: 16,\r\n  labelSkipHeight: 16,\r\n  layout: \"horizontal\",\r\n} as BarSvgProps<BarDatum>;\r\n\r\nfunction App() {\r\n  const [credentials, setCredentials] = useLocalStorage<Credentials | null>(\"credentials\", null)\r\n  const [selectedUser, selectUser] = useLocalStorage<UserSchema | null>(\"user\", null);\r\n  const [project, setProject] = useLocalStorage<ProjectSchema | null>(\"project\", null);\r\n  const [comments, setComments] = useState<UserComment[]>([]);\r\n  const [discussions, setDiscussions] = useState<UserDiscussion[]>([]);\r\n  const [createdBefore, setCreatedBefore] = useState<Date>(new Date());\r\n  const [createdAfter, setCreatedAfter] = useState<Date>(new Date(new Date().setMonth(new Date().getMonth() - 1)));\r\n  const [user, setUser] = useState<UserSchema | null>(null);\r\n\r\n  const [filteredComments, setFilteredComments] = useState<UserComment[]>([]);\r\n\r\n  const client = useMemo(() => new Gitlab(credentials), [credentials]);\r\n\r\n  useEffect(() => {\r\n    client.Users.current().then(current => {\r\n      setUser(current);\r\n    })\r\n  }, [client]);\r\n\r\n  const handleAnalyze = () => {\r\n    Promise.all([showComments(), showDiscussions()]);\r\n  };\r\n\r\n  const showComments = async () => {\r\n    try {\r\n      if (!project)\r\n        return;\r\n\r\n      const comments = await getUserComments(client, {\r\n        projectId: project.id,\r\n        createdAfter: createdAfter.toISOString(),\r\n        createdBefore: createdBefore.toISOString(),\r\n      });\r\n\r\n      setComments(comments);\r\n    } catch (ex) {\r\n      console.error(ex);\r\n    }\r\n  };\r\n\r\n  const showDiscussions = async () => {\r\n    try {\r\n      if (!project)\r\n        return;\r\n\r\n      const discussions = await getDiscussons(client, {\r\n        projectId: project.id,\r\n        createdAfter: createdAfter.toISOString(),\r\n        createdBefore: createdBefore.toISOString(),\r\n      });\r\n\r\n      setDiscussions(discussions);\r\n\r\n      console.log(discussions);\r\n    } catch (ex) {\r\n      console.error(ex);\r\n    }\r\n  }\r\n\r\n  const discussionsLeft = useMemo(() => convertToDiscussionsLeft(discussions), [discussions])\r\n  const discussionsReceived = useMemo(() => convertToDiscussionsReceived(discussions), [discussions])\r\n  const commentsLeft = useMemo(() => convertToCommentsLeft(comments), [comments]);\r\n  const commentsRecieved = useMemo(() => convertToCommentsReceived(comments), [comments]);\r\n  const commentsRecievedFromUsers = useMemo(() => selectedUser ? convertToCommentsRecivedFromUsers(comments, selectedUser.id) : null, [comments, selectedUser])\r\n  const commentsLeftToUsers = useMemo(() => selectedUser ? convertToCommentsLeftToUsers(comments, selectedUser.id) : null, [comments, selectedUser]);\r\n  const updateComments = useCallback((reviewerName: string | null, authorName: string | null) => {\r\n    setFilteredComments(getFilteredComments(comments, reviewerName, authorName));\r\n  }, [comments]);\r\n  const [anchorElUser, setAnchorElUser] = React.useState(null);\r\n\r\n  const handleOpenUserMenu = (event: any) => {\r\n    setAnchorElUser(event.currentTarget);\r\n  };\r\n\r\n  const handleCloseNavMenu = () => {\r\n    setCredentials(null);\r\n    handleCloseUserMenu();\r\n  };\r\n\r\n  const handleCloseUserMenu = () => {\r\n    setAnchorElUser(null);\r\n  };\r\n\r\n\r\n  if (!credentials) {\r\n    return <Login\r\n      onLoggedIn={(token, host, user) => {\r\n        setCredentials({\r\n          token,\r\n          host,\r\n        })\r\n        setUser(user);\r\n      }}\r\n    />\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <AppBar position=\"static\">\r\n        <Container maxWidth=\"xl\">\r\n          <Toolbar disableGutters>\r\n            <Typography\r\n              variant=\"h6\"\r\n              noWrap\r\n              component=\"div\"\r\n              sx={{ mr: 2, display: 'flex', flexGrow: 1 }}\r\n            >\r\n              Analyzer\r\n            </Typography>\r\n            <Box sx={{ flexGrow: 0 }}>\r\n              <Tooltip title=\"Open settings\">\r\n                <IconButton onClick={handleOpenUserMenu} sx={{ p: 0 }}>\r\n                  <Avatar alt={user?.name} src={user?.avatar_url} />\r\n                </IconButton>\r\n              </Tooltip>\r\n              <Menu\r\n                sx={{ mt: '45px' }}\r\n                id=\"menu-appbar\"\r\n                anchorEl={anchorElUser}\r\n                anchorOrigin={{\r\n                  vertical: 'top',\r\n                  horizontal: 'right',\r\n                }}\r\n                keepMounted\r\n                transformOrigin={{\r\n                  vertical: 'top',\r\n                  horizontal: 'right',\r\n                }}\r\n                open={Boolean(anchorElUser)}\r\n                onClose={handleCloseUserMenu}\r\n              >\r\n                <MenuItem onClick={handleCloseNavMenu}>\r\n                  <Typography textAlign=\"center\">Logout</Typography>\r\n                </MenuItem>\r\n              </Menu>\r\n            </Box>\r\n          </Toolbar>\r\n        </Container>\r\n      </AppBar>\r\n      <Box style={{ display: 'flex' }}>\r\n        <Stack className='App-users' spacing={2}>\r\n          <ProjectList project={project} onProjectSelected={setProject} />\r\n          <UserList\r\n            label='Author'\r\n            user={selectedUser}\r\n            onUserSelected={selectUser} />\r\n          <TextField\r\n            label=\"Created After\"\r\n            type=\"date\"\r\n            value={createdAfter?.toISOString().substring(0, 10)}\r\n            onChange={(newValue) => {\r\n              const newDate = new Date(newValue.target.value);\r\n              setCreatedAfter(newDate);\r\n            }}\r\n            InputLabelProps={{\r\n              shrink: true,\r\n            }}\r\n            fullWidth\r\n          />\r\n          <TextField\r\n            label=\"Created Before\"\r\n            type=\"date\"\r\n            value={createdBefore?.toISOString().substring(0, 10)}\r\n            onChange={(newValue) => {\r\n              const newDate = new Date(newValue.target.value);\r\n              setCreatedBefore(newDate);\r\n            }}\r\n            InputLabelProps={{\r\n              shrink: true,\r\n            }}\r\n            fullWidth\r\n          />\r\n          <Button onClick={handleAnalyze}>Analyze</Button>\r\n          <Button onClick={() => {\r\n            downloadComments(filteredComments);\r\n          }}>\r\n            Download\r\n          </Button>\r\n        </Stack>\r\n        <div style={{ display: 'flex', flexDirection: 'column', flexGrow: 1 }}>\r\n          <div className=\"charts\">\r\n            {selectedUser && commentsLeftToUsers &&\r\n              <ChartContainer title={`${selectedUser?.name} reviews following people`}>\r\n                <Bar\r\n                  {...barChartSettings}\r\n                  {...commentsLeftToUsers}\r\n                  onClick={(e) => {\r\n                    updateComments(selectedUser.username, e.data.author as string);\r\n                  }}\r\n                />\r\n              </ChartContainer>\r\n            }\r\n            {selectedUser && commentsRecievedFromUsers &&\r\n              <ChartContainer title={`Following people review ${selectedUser?.name}`}>\r\n                <Bar\r\n                  {...barChartSettings}\r\n                  {...commentsRecievedFromUsers}\r\n                  onClick={(e) => {\r\n                    updateComments(e.data.reviewer as string, selectedUser.username);\r\n                  }}\r\n                />\r\n              </ChartContainer>\r\n            }\r\n            <ChartContainer title=\"Comments left by person\">\r\n              <Bar\r\n                {...barChartSettings}\r\n                {...commentsLeft}\r\n                onClick={(e) => {\r\n                  updateComments(e.indexValue as string, e.id as string);\r\n                }}\r\n              />\r\n            </ChartContainer>\r\n\r\n            <ChartContainer title=\"Comments recieved by person\">\r\n              <Bar\r\n                {...barChartSettings}\r\n                {...commentsRecieved}\r\n                onClick={(e) => {\r\n                  updateComments(e.id as string, e.indexValue as string);\r\n                }}\r\n              />\r\n            </ChartContainer>\r\n            <ChartContainer title=\"Discussions left by person\">\r\n              <Bar\r\n                {...barChartSettings}\r\n                {...discussionsLeft}\r\n                onClick={(e) => {\r\n                  console.log(e);\r\n                }}\r\n              />\r\n            </ChartContainer>\r\n            <ChartContainer title=\"Discussions received by person\">\r\n              <Bar\r\n                {...barChartSettings}\r\n                {...discussionsReceived}\r\n                onClick={(e) => {\r\n                  console.log(e);\r\n                }}\r\n              />\r\n            </ChartContainer>\r\n          </div>\r\n          <CommentList comments={filteredComments} />\r\n          Total: {filteredComments.length}\r\n        </div>\r\n      </Box>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import zipcelx, { ZipCelXConfig, ZipCelXRow } from 'zipcelx';\r\nimport { getNoteUrl, UserComment } from './GitLabUtils';\r\n\r\nexport function downloadComments(comments: UserComment[]) {\r\n    const exportEntries = comments.map<ZipCelXRow>(({ mergeRequest, comment }) => [{\r\n        value: mergeRequest.author.username as string,\r\n        type: 'string'\r\n    }, {\r\n        value: comment.author.username,\r\n        type: 'string'\r\n    }, {\r\n        value: comment.body,\r\n        type: 'string',\r\n    }, {\r\n        value: getNoteUrl({ mergeRequest, comment }),\r\n        type: 'string',\r\n    }, {\r\n        value: mergeRequest.title,\r\n        type: 'string'\r\n    }])\r\n\r\n    const config: ZipCelXConfig = {\r\n        //TODO: add ability to specify file name\r\n        filename: 'general-ledger-Q1',\r\n        sheet: {\r\n            data: [\r\n                [{\r\n                    value: 'MR Author',\r\n                    type: 'string'\r\n                }, {\r\n                    value: 'Comment Author - Reviewer',\r\n                    type: 'string'\r\n                }, {\r\n                    value: 'Comment Content',\r\n                    type: 'string',\r\n                }, {\r\n                    value: 'Comment Link',\r\n                    type: 'string',\r\n                }, {\r\n                    value: 'MR Title',\r\n                    type: 'string'\r\n                }],\r\n               ...exportEntries\r\n            ]\r\n        }\r\n    };\r\n\r\n    zipcelx(config);\r\n}","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}